{"version":3,"sources":["Title.jsx","Display.jsx","Table.jsx","StateMessage.jsx","RestartButton.jsx","GlobalStyle.jsx","App.js","reportWebVitals.js","index.js"],"names":["TitleText","styled","h1","Title","props","title","Display","Turn","div","Circle","isCircle","Cross","Table","TableBackground","table","TableCell","td","onClick","data-cell","cells","StateMessage","StateMessageText","message","Button","button","RestartButton","GlobalStyle","createGlobalStyle","Wrapper","Footer","footer","App","handleRestartButtonClick","setState","turnCount","Array","fill","stateMessage","isGameContinued","isCircleTurn","handleCellClick","e","indexOfCell","currentTarget","dataset","cell","isEmptyString","state","insertMark","toggleTurn","calculateWinner","countTurn","checkDraw","maxTurn","cellsCopy","sign","circle","cross","string","length","player","winnigPerttern","some","pattern","first","second","third","bind","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.90077184.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from 'styled-components';\n\nconst TitleText = styled.h1`\n  padding: 1rem 1rem 0 1rem;\n`;\n\nconst Title = (props) => {\n  return (\n    <TitleText>{props.title}</TitleText>\n  );\n};\n\nexport default Title;","import React from 'react';\nimport styled from 'styled-components';\n\nconst Display = (props) => {\n\n  const Turn = styled.div`\n    display: flex;\n    justify-content: center;\n    padding: 0 1rem 1rem 1rem;\n  `;\n\n  const Circle = styled.div`\n    padding: .5rem 1rem;\n    font-size: 1.2rem;\n    border-bottom: ${props => props.isCircle ? '3px solid #000' : '0px'};\n  `;\n\n  const Cross = styled.div`\n    padding: .5rem 1rem;\n    font-size: 1.2rem;\n    font-weight: bold;\n    border-bottom: ${props => props.isCircle ? '0px' : '3px solid #000'};\n  `;\n\n  return (\n    <Turn>\n      <Circle isCircle={props.isCircle}>○</Circle>\n      <Cross isCircle={props.isCircle}>×</Cross>\n    </Turn>\n  );\n};\n\nexport default Display;","import React from 'react';\nimport styled from 'styled-components';\n\nconst Table = (props) => {\n  const TableBackground = styled.table`\n    background: #000;\n  `;\n\n  const TableCell = styled.td`\n    background: #fff;\n    padding: 1px;\n    width: 3rem;\n    height: 3rem;\n    cursor: pointer;\n    text-align: center;\n    font-size: 1.5rem;\n  `;\n\n  return (\n    <div>\n      <TableBackground>\n        <tbody>\n          <tr>\n            {/* Reactのイベント処理では、イベントが発生したとき、設定した関数を、「発生したイベントを引数にして」実行する */}\n            <TableCell onClick={props.onClick} data-cell='0'>{props.cells[0]}</TableCell>\n            <TableCell onClick={props.onClick} data-cell='1'>{props.cells[1]}</TableCell>\n            <TableCell onClick={props.onClick} data-cell='2'>{props.cells[2]}</TableCell>\n          </tr>\n          <tr>\n            <TableCell onClick={props.onClick} data-cell='3'>{props.cells[3]}</TableCell>\n            <TableCell onClick={props.onClick} data-cell='4'>{props.cells[4]}</TableCell>\n            <TableCell onClick={props.onClick} data-cell='5'>{props.cells[5]}</TableCell>\n          </tr>\n          <tr>\n            <TableCell onClick={props.onClick} data-cell='6'>{props.cells[6]}</TableCell>\n            <TableCell onClick={props.onClick} data-cell='7'>{props.cells[7]}</TableCell>\n            <TableCell onClick={props.onClick} data-cell='8'>{props.cells[8]}</TableCell>\n          </tr>\n        </tbody>\n      </TableBackground>\n    </div>\n  );\n};\n\n\nexport default Table;","import React from 'react';\nimport styled from 'styled-components';\n\nconst StateMessage = (props) => {\n\n  const StateMessageText = styled.div`\n    text-align: center;\n    padding: .5rem;\n  `;\n  return (\n    <StateMessageText>\n      {props.message}\n    </StateMessageText>\n  );\n};\n\nexport default StateMessage;","import React from 'react';\nimport styled from 'styled-components';\n\nconst Button = styled.button`\n  width: 100%;\n  background: #fff;\n  cursor: pointer;\n  font-weight: bold;\n  border: 2px solid #000;\n  border-radius: 4px;\n  padding: 4px 0;\n  outline: none;\n  transition: background 200ms ease, color 200ms ease;\n  &:hover{\n    background: #000;\n    color: #fff;\n  }\n`;\n\nconst RestartButton = (props) => {\n  return (\n    <div>\n      <Button onClick={props.onClick}>Restart</Button>\n    </div>\n  );\n};\n\nexport default RestartButton;","import {createGlobalStyle} from 'styled-components';\n\n// SMACSSでいうbaseの役割\nconst GlobalStyle = createGlobalStyle`\n  h1 {\n    font-size: 1.2rem;\n  };\n  *, *:after, *:before {\n    box-sizing: border-box;\n  };\n  html {\n    font-family: 'Lato', 'Lucida Grande', 'Lucida Sans Unicode', Tahoma, Sans-Serif;\n  };\n  body {\n    margin: 0;\n    padding: 0;\n    background: #fefefe;\n  }\n`;\n\nexport default GlobalStyle;","import Title from './Title';\nimport Display from './Display';\nimport Table from './Table';\nimport StateMessage from './StateMessage';\nimport RestartButton from './RestartButton';\nimport React from 'react';\nimport styled from 'styled-components';\nimport GlobalStyle from './GlobalStyle';\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  height: 100vh;\n  align-items: center;\n`;\n\nconst Footer = styled.footer`\n  padding: 1rem;\n`;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stateMessage: 'starting...',\n      isCircleTurn: true,\n      cells: new Array(9).fill(''), // 空文字判定関数のisEmptyStringのために空文字で埋めておく\n      turnCount: 0,\n      isGameContinued: true,\n    };\n    this.circle = '○';\n    this.cross = '×';\n    this.winnigPerttern = [\n      // row\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      // column\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      // diagonal\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n    this.maxTurn = 8;\n    // thisをconstructorで束縛する。\n    // onClickで呼び出すときにarrow関数を使って束縛することもできるが、\n    // 子コンポーネントに渡す関数の場合、子コンポーネントも無駄に再描画されてしまう。\n    this.handleCellClick = this.handleCellClick.bind(this);\n    this.handleRestartButtonClick = this.handleRestartButtonClick.bind(this);\n  };\n\n  // リスタート処理\n  handleRestartButtonClick = () => {\n    this.setState({\n      turnCount: 0,\n      cells: new Array(9).fill(''),\n      stateMessage: 'starting...',\n      isGameContinued: true,\n      isCircleTurn: true,\n    });\n  }\n\n  // arrow functionにすることでthisを固定\n  handleCellClick = (e) => {\n    const indexOfCell = e.currentTarget.dataset.cell;\n    // セルの中身が空の場合 & ゲームが終了していない場合に処理を進める\n    // つまり、 一度markが入ったセルはクリックできないようにする & ゲームが終わったらクリックできないようにする\n    if ( this.isEmptyString(this.state.cells[indexOfCell]) && this.state.isGameContinued ) {\n      this.insertMark(indexOfCell);\n      this.toggleTurn();\n      this.calculateWinner();\n      this.countTurn();\n      this.checkDraw();\n    };\n  };\n\n  checkDraw = () => {\n    if (this.state.turnCount === this.maxTurn) {\n      this.setState({\n        stateMessage: 'draw',\n      });\n    }\n  }\n\n  // 経過ターン数をカウント(引き分けを判定するための材料になる)\n  countTurn = () => {\n    this.setState({\n      turnCount: this.state.turnCount + 1 // [issue] 1手目で1にならずに0のまま。2手目から1になる。\n    });\n  };\n\n  // セルがクリックされたらターンを変更(○ ⇄ ×)\n  toggleTurn = () => {\n    this.setState({\n      isCircleTurn: !this.state.isCircleTurn // stateの'isCircleTurn'の値を変更する\n    });\n  };\n\n  // cellに '◯' or '×' を挿入\n  insertMark = (indexOfCell) => {\n    // 配列のstateを変更するには、一度変更前のstateの配列をコピーし更新したものをstateに渡す。\n    const cellsCopy = this.state.cells;\n    const sign = this.state.isCircleTurn ? this.circle : this.cross;\n\n    cellsCopy[indexOfCell] = sign;\n\n    // コピーを更新したものをstateに渡す\n    this.setState({\n      cells: cellsCopy\n    });\n  };\n\n  // 引数の文字列が空文字かの判定\n  isEmptyString = (string) => {\n    return typeof string === 'string' && string.length === 0;\n  }\n\n  // 勝者を判定\n  calculateWinner = () => {\n    const cellsCopy = this.state.cells;\n    const player = this.state.isCircleTurn ? this.circle : this.cross;\n\n    const hasWon = this.winnigPerttern.some((pattern) => {\n      const [first, second, third] = pattern;\n      return cellsCopy[first] && cellsCopy[first] === cellsCopy[second] && cellsCopy[first] === cellsCopy[third];\n    });\n\n    // 勝者が決まった場合\n    if (hasWon) {\n      this.setState({\n        stateMessage: `${player} win!`,\n        isGameContinued: false,\n      });\n    }\n  }\n\n  render() {\n    return (\n        <>\n          <Wrapper>\n            <GlobalStyle />\n            <div>\n              <header>\n                <Title title='Tic Tac Toe' />\n              </header>\n              <main>\n                <Display isCircle={this.state.isCircleTurn} />\n                <Table onClick={this.handleCellClick} cells={this.state.cells} />\n              </main>\n              <Footer>\n                <StateMessage message={this.state.stateMessage} />\n                <RestartButton onClick={this.handleRestartButtonClick} />\n              </Footer>\n            </div>\n          </Wrapper>\n        </>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}